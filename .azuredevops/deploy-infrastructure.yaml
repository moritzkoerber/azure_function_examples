trigger: none

pool:
  vmImage: "ubuntu-latest"

parameters:
  - name: environment
    type: string
    default: "dev"
    values:
      - "dev"
      - "stg"
      - "prd"

variables:
  serviceConnection: "example-federated-sc"

jobs:
  - job: deployInfrastructure
    displayName: "Deploy the infrastructure"
    steps:
      - task: TerraformInstaller@0
        displayName: "Install Terraform"
        inputs:
          terraformVersion: "1.9.1"

      - task: TerraformTaskV4@4
        displayName: "Initialize Terraform"
        inputs:
          provider: "azurerm"
          command: "init"
          backendAzureRmContainerName: "af-tf-state"
          backendAzureRmKey: "terraform.tfstate"
          backendAzureRmResourceGroupName: "terraform-rg"
          backendAzureRmStorageAccountName: "generaltfstatesta"
          backendServiceArm: $(serviceConnection)
          workingDirectory: "$(System.DefaultWorkingDirectory)/ops"

      - task: TerraformTaskV4@4
        name: terraformPlan
        displayName: "Create Terraform Plan"
        inputs:
          command: "plan"
          commandOptions: "-out main.tfplan -var env=${{ parameters.environment }}"
          environmentServiceNameAzureRM: $(serviceConnection)
          provider: "azurerm"
          workingDirectory: "$(System.DefaultWorkingDirectory)/ops"

      - task: TerraformTaskV4@4
        displayName: "Apply Terraform Plan"
        condition: eq(variables['terraformPlan.changesPresent'], 'true')
        inputs:
          command: "apply"
          commandOptions: "main.tfplan -var env=${{ parameters.environment }}"
          environmentServiceNameAzureRM: $(serviceConnection)
          provider: "azurerm"
          workingDirectory: "$(System.DefaultWorkingDirectory)/ops"
